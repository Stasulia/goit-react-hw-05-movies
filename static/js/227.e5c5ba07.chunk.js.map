{"version":3,"file":"static/js/227.e5c5ba07.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Loader/Loader.jsx","components/Service/MovieApi.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'components/Service/MovieApi';\n\nimport defaultPicture from './default_actor.jpg';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (!movieId) return;\n    const fetchMovieCast = async () => {\n      try {\n        const data = await getMovieCredits(movieId);\n        const casts = data.cast;\n\n        if (!casts.length) {\n          setError(`No actors are mentioned`);\n          setStatus('rejected');\n        }\n\n        setCasts(casts);\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {status === 'rejected' && <p>{error}</p>}\n\n      {casts.map(cast => {\n        if (cast.profile_path) {\n          return (\n            <li key={cast.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\n                alt={cast.name}\n              />\n              <p>Name: {cast.name}</p>\n              <p>Character: {cast.character}</p>\n            </li>\n          );\n        } else {\n          return (\n            <li key={cast.id}>\n              <img src={defaultPicture} alt={cast.name} height={225} />\n              <p>Name: {cast.name}</p>\n              <p>Character: {cast.character}</p>\n            </li>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\nexport default Cast;\n","import { Circles } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Circles\n      height=\"80\"\n      width=\"80\"\n      color=\"rgb(164, 218, 220)\"\n      ariaLabel=\"circles-loading\"\n      wrapperStyle={{\n        display: 'flex',\n        justifyContent: 'center',\n        textAlign: 'center',\n      }}\n      visible={true}\n    />\n  );\n};\n","import axios from 'axios';\n\nexport const API_KEY = '7e904d0cc36c36a15049d60007f4c80a';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching trending movies:', error);\n    return [];\n  }\n};\n\nexport const getMovies = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    return [];\n  }\n};\n\nexport const getMoviesDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error('Error getting movie details: ', error);\n    return null;\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error('Error getting movie credits', error);\n    return null;\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('Error getting reviews for the movie:', error);\n    return null;\n  }\n};\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","casts","setCasts","_useState3","_useState4","error","setError","_useState5","_useState6","status","setStatus","_useState7","_useState8","isLoading","setIsLoading","useEffect","fetchMovieCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_casts","_context","prev","next","getMovieCredits","sent","cast","length","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","map","profile_path","src","concat","alt","name","character","id","defaultPicture","height","Circles","width","color","ariaLabel","wrapperStyle","display","justifyContent","textAlign","visible","API_KEY","BASE_URL","getMovies","_ref2","_callee2","query","response","_context2","axios","abrupt","results","console","_x","getMoviesDetails","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","getMovieReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}